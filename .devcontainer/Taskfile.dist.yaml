version: '3'

output: prefixed

vars:
  SYSROOT: '/home/vscode/sysroot'
  RPIROOT: '/home/vscode/cache'

tasks:
  sysroot-lib:
    internal: true
    requires:
      vars: [SYMLINK]
    vars:
      LINK_TARGET:
        sh: readlink -n {{.SYMLINK}}
    silent: true
    cmds: 
      - |
        if [[ "{{.LINK_TARGET}}" = /lib/* ]]; then
          echo {{base .SYMLINK}} ⟶ {{base .LINK_TARGET}}
          ln -fsr {{.SYSROOT}}/usr{{.LINK_TARGET}} {{.SYMLINK}}
        elif [[ "{{.LINK_TARGET}}" = ../../../* ]]; then
          echo {{base .SYMLINK}} ⇒ {{base .LINK_TARGET}}
          ln -fsr {{.SYSROOT}}/usr/lib/{{base .LINK_TARGET}} {{.SYMLINK}}
        fi
  
  fix-lib-symlinks:
    internal: true
    vars:
      SYMLIBS:
        sh: find -P {{.SYSROOT}}/usr/lib -type l -name 'lib*.so*'
    cmds:
      - for:
          var: SYMLIBS
        task: sysroot-lib
        vars:
          SYMLINK: '{{.ITEM}}'

  rpi-sysroot:
    desc: Prepare Raspberry Pi SYSROOT
    summary: |
      Prepare Raspberry Pi SYSROOT

      SYSROOT prepared this way works with gcc-arm-linux-gnueabihf cross-compiler
      and ARM GNU Toolchain (previously known as Linaro) one.
      "gold" linker is supported too.

      * Libraries are accessible via $SYSROOT/lib, $SYSROOT/lib/arm-linux-gnueabihf, $SYSROOT/usr/lib and $SYSROOT/usr/lib/arm-linux-gnueabihf paths.
      * All object files are located in /usr/lib (/lib) folder.
      * All symlinks are fixed.
    preconditions:
      - test -d {{.RPIROOT}}
    cmds:
      - mkdir -p {{.SYSROOT}}/usr
      - cp -a {{.RPIROOT}}/usr/lib/arm-linux-gnueabihf {{.SYSROOT}}/usr/
      - mv {{.SYSROOT}}/usr/arm-linux-gnueabihf {{.SYSROOT}}/usr/lib
      - mkdir -p {{.SYSROOT}}/usr/lib/gcc
      - cp -a {{.RPIROOT}}/usr/lib/gcc/arm-linux-gnueabihf/*/* {{.SYSROOT}}/usr/lib/gcc
      - mv {{.SYSROOT}}/usr/lib/gcc/*.o {{.SYSROOT}}/usr/lib/
      - cp -a {{.RPIROOT}}/usr/include {{.SYSROOT}}/usr/
      - ln -sr {{.SYSROOT}}/usr/lib {{.SYSROOT}}/usr/lib/arm-linux-gnueabihf
      - ln -sr {{.SYSROOT}}/usr/lib {{.SYSROOT}}/lib
      - ln -sr {{.SYSROOT}}/usr/include {{.SYSROOT}}/include
      - task: fix-lib-symlinks

  divert-crt-obj:
    internal: true
    requiremets:
      vars: [CRT_OBJ, GCC_DRIVER]
    vars:
      GCC_FILE:
        sh: '{{.GCC_DRIVER}} -print-file-name={{base .CRT_OBJ}}'
    silent: true
    cmds:
      - echo {{base .CRT_OBJ}} ⟶ {{.GCC_FILE}}
      - dpkg-divert --quiet --rename {{.GCC_FILE}}

  fix-gcc-startup-*:
    desc: Fix startup files
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'
      CRT_OBJS:
        sh: find {{.SYSROOT}}/usr/lib -type f -name '*crt*.o'
    cmds:
      - for: 
          var: CRT_OBJS
        task: divert-crt-obj
        vars:
          GCC_DRIVER: '{{.TOOLCHAIN}}-gcc'
          CRT_OBJ: '{{.ITEM}}'

  rename-crt-obj:
    internal: true
    requiremets:
      vars: [CRT_OBJ, GCC_DRIVER]
    vars:
      GCC_FILE:
        sh: '{{.GCC_DRIVER}} -print-file-name={{base .CRT_OBJ}}'
    cmds:
      - mv {{.GCC_FILE}} {{.GCC_FILE}}.distrib

  arm-gnu-toolchain-fix-startup-*:
    internal: true
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'
      GCC_DRIVER: '/home/vscode/{{.TOOLCHAIN}}/bin/{{.TOOLCHAIN}}-gcc'      
      CRT_OBJS:
        sh: find {{.SYSROOT}}/usr/lib -type f -name '*crt*.o'
    cmds:
      - for:
          var: CRT_OBJS
        task: rename-crt-obj
        vars:
          GCC_DRIVER: '{{.GCC_DRIVER}}'
          CRT_OBJ: '{{.ITEM}}'

  arm-gnu-toolchain-extract-*:
    internal: true
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'
    dir: '/home/vscode/{{.TOOLCHAIN}}'
    cmds:
      - tar -xf /home/vscode/cache/arm-gnu-toolchain-{{.ARM_GNU_TOOLCHAIN_VER}}-x86_64-{{.TOOLCHAIN}}.tar.xz --strip-components=1

  arm-gnu-toolchain-install-*:
    desc: Install ARM GNU Toolchain
    vars:
      TOOLCHAIN: '{{index .MATCH 0}}'    
    cmds:
      - task: arm-gnu-toolchain-extract-{{.TOOLCHAIN}}
      - task: arm-gnu-toolchain-fix-startup-{{.TOOLCHAIN}}
